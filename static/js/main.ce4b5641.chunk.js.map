{"version":3,"sources":["components/quote.js","components/tweetQuote.js","components/refreshQuote.js","components/spinner.js","components/quoteBox.js","App.js","serviceWorker.js","index.js"],"names":["Quote","react_default","a","createElement","id","className","this","props","text","author","concat","Component","TweetButton","href","tweet","target","rel","onClick","refreshButton","isLoading","Spinner","QuoteBox","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleRefreshClick","setState","quote","getNewQuote","state","initialLoad","_this2","fetch","then","response","json","data","quoteAuthor","quoteText","catch","error","console","spinner_Spinner","quote_Quote","refreshQuote_refreshButton","tweetQuote_TweetButton","App","quoteBox_QuoteBox","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"wVAGqBA,sMAEjB,OACEC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,KAAGC,GAAG,QACJH,EAAAC,EAAAC,cAAA,KAAGE,UAAU,sBACZC,KAAKC,MAAMC,MAEdP,EAAAC,EAAAC,cAAA,KAAGC,GAAG,SAASC,UAAU,UACtBC,KAAKC,MAAME,OAAX,IAAAC,OAAwBJ,KAAKC,MAAME,QAAW,YATtBE,cCEdC,0LAEjB,OACEX,EAAAC,EAAAC,cAAA,KACEC,GAAG,cACHS,KAPS,8DAOQP,KAAKC,MAAMO,MAC5BC,OAAO,SACPC,IAAI,uBAEJf,EAAAC,EAAAC,cAAA,KAAGE,UAAU,iBAAiBY,QAASX,KAAKC,MAAMU,kBATjBN,cCFpBO,0LAEjB,OACEjB,EAAAC,EAAAC,cAAA,KACEC,GAAG,YACHC,UAAS,cAAAK,OACPJ,KAAKC,MAAMY,UAAY,uBAAyB,IAElDF,QAASX,KAAKC,MAAMU,iBAReN,cCAtBS,0LAEjB,OAAOnB,EAAAC,EAAAC,cAAA,OAAKE,UAAU,mBAFWM,cCQhBU,cACnB,SAAAA,EAAYd,GAAO,IAAAe,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAjB,KAAAe,IACjBC,EAAAC,OAAAE,EAAA,EAAAF,CAAAjB,KAAAiB,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAArB,KAAMC,KAmCRqB,mBAAqB,WACnBN,EAAKO,SAAS,CAAEC,MAAO,CAAEX,WAAW,KACpCG,EAAKS,eApCLT,EAAKU,MAAQ,CACXC,aAAa,EACbH,MAAO,CACLrB,OAAQ,GACRD,KAAM,GACNW,WAAW,IAPEG,mFAajBhB,KAAKyB,oDAGO,IAAAG,EAAA5B,KAEZ6B,MArBF,+GAsBKC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GAAI,OACRL,EAAKL,SAAS,CACZC,MAAO,CACLrB,OAAQ8B,EAAKC,aAAe,YAC5BhC,KAAM+B,EAAKE,UACXtB,WAAW,GAEbc,aAAa,MAGhBS,MAAM,SAASC,GACdrC,KAAKuB,SAAS,CAAEC,MAAO,CAAEX,WAAW,GAASc,aAAa,IAC1DW,QAAQD,MAAM,+CAAgDA,sCAUlE,OACE1C,EAAAC,EAAAC,cAAA,OAAKC,GAAG,YAAYC,UAAU,aAC3BC,KAAK0B,MAAMC,YACVhC,EAAAC,EAAAC,cAAC0C,EAAD,MAEA5C,EAAAC,EAAAC,cAAC2C,EAAD,CACErC,OAAQH,KAAK0B,MAAMF,MAAMrB,OACzBD,KAAMF,KAAK0B,MAAMF,MAAMtB,OAG3BP,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,OAAKE,UAAU,qBACbJ,EAAAC,EAAAC,cAAC4C,EAAD,CACE5B,UAAWb,KAAK0B,MAAMF,MAAMX,UAC5BF,QAASX,KAAKsB,qBAEhB3B,EAAAC,EAAAC,cAAC6C,EAAD,CAAYlC,MAAOR,KAAK0B,MAAMF,MAAMtB,gBA3DRG,aCGvBsC,mLARX,OACEhD,EAAAC,EAAAC,cAAA,QAAME,UAAU,OACdJ,EAAAC,EAAAC,cAAC+C,EAAD,cAJUvC,aCQEwC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOxD,EAAAC,EAAAC,cAACuD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM3B,KAAK,SAAA4B,GACjCA,EAAaC","file":"static/js/main.ce4b5641.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./quote.css\";\r\n\r\nexport default class Quote extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <p id=\"text\">\r\n          <i className=\"fas fa-quote-left\" />\r\n          {this.props.text}\r\n        </p>\r\n        <p id=\"author\" className=\"author\">\r\n          {this.props.author ? `-${this.props.author}` : \"\"}\r\n        </p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport \"./tweetQuote.css\";\r\n\r\nconst tweetUrl = \"https://twitter.com/intent/tweet?hashtags=quote&url=/&text=\";\r\n\r\nexport default class TweetButton extends Component {\r\n  render() {\r\n    return (\r\n      <a\r\n        id=\"tweet-quote\"\r\n        href={tweetUrl + this.props.tweet}\r\n        target=\"_blank\"\r\n        rel=\"noopener noreferrer\"\r\n      >\r\n        <i className=\"fab fa-twitter\" onClick={this.props.onClick} />\r\n      </a>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport \"./refreshQuote.css\";\r\n\r\nexport default class refreshButton extends Component {\r\n  render() {\r\n    return (\r\n      <i\r\n        id=\"new-quote\"\r\n        className={`fas fa-sync${\r\n          this.props.isLoading ? \" fa-sync--is-loading\" : \"\"\r\n        }`}\r\n        onClick={this.props.onClick}\r\n      />\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport \"./spinner.css\";\r\n\r\nexport default class Spinner extends Component {\r\n  render() {\r\n    return <div className=\"spinner\" />;\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport \"./quoteBox.css\";\r\nimport Quote from \"./quote\";\r\nimport TweetQuote from \"./tweetQuote\";\r\nimport RefreshQuote from \"./refreshQuote\";\r\nimport Spinner from \"./spinner\";\r\n\r\nconst quoteUrl =\r\n  // Forismatic doesn't send the Access-Control-Allow-Origin response header, so make the request through a CORS proxy.\r\n  \"https://cors-anywhere.herokuapp.com/https://api.forismatic.com/api/1.0/?method=getQuote&format=json&lang=en\";\r\n\r\nexport default class QuoteBox extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      initialLoad: true,\r\n      quote: {\r\n        author: \"\",\r\n        text: \"\",\r\n        isLoading: false\r\n      }\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getNewQuote();\r\n  }\r\n\r\n  getNewQuote() {\r\n    // New quote is loading\r\n    fetch(quoteUrl)\r\n      .then(response => response.json())\r\n      .then(data =>\r\n        this.setState({\r\n          quote: {\r\n            author: data.quoteAuthor || \"anonymous\",\r\n            text: data.quoteText,\r\n            isLoading: false\r\n          },\r\n          initialLoad: false\r\n        })\r\n      )\r\n      .catch(function(error) {\r\n        this.setState({ quote: { isLoading: false }, initialLoad: false });\r\n        console.error(\"There was a problem fetching a new quote: \\n\", error);\r\n      });\r\n  }\r\n\r\n  handleRefreshClick = () => {\r\n    this.setState({ quote: { isLoading: true } });\r\n    this.getNewQuote();\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div id=\"quote-box\" className=\"quote-box\">\r\n        {this.state.initialLoad ? (\r\n          <Spinner />\r\n        ) : (\r\n          <Quote\r\n            author={this.state.quote.author}\r\n            text={this.state.quote.text}\r\n          />\r\n        )}\r\n        <hr />\r\n        <div className=\"quote-box__footer\">\r\n          <RefreshQuote\r\n            isLoading={this.state.quote.isLoading}\r\n            onClick={this.handleRefreshClick}\r\n          />\r\n          <TweetQuote tweet={this.state.quote.text} />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport QuoteBox from \"./components/quoteBox.js\";\n\nclass App extends Component {\n  render() {\n    return (\n      <main className=\"App\">\n        <QuoteBox />\n      </main>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}