{"version":3,"sources":["components/quote.js","components/refreshQuote.js","components/spinner.js","components/tweetQuote.js","components/quoteBox.js","App.js","serviceWorker.js","index.js"],"names":["Quote","id","className","this","props","text","author","Component","refreshButton","isLoading","onClick","Spinner","TweetButton","href","tweet","target","rel","quoteUrl","QuoteBox","getNewQuote","fetch","cache","then","response","JSON","parse","replace","data","setState","quote","quoteAuthor","quoteText","initialLoad","catch","error","state","console","handleRefreshClick","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"iZAGqBA,G,6LAEjB,OACE,6BACE,uBAAGC,GAAG,QACJ,uBAAGC,UAAU,sBACZC,KAAKC,MAAMC,MAEd,uBAAGJ,GAAG,SAASC,UAAU,UACtBC,KAAKC,MAAME,OAAX,WAAwBH,KAAKC,MAAME,QAAW,S,GATtBC,cCAdC,G,uLAEjB,OACE,uBACEP,GAAG,YACHC,UAAS,qBACPC,KAAKC,MAAMK,UAAY,uBAAyB,IAElDC,QAASP,KAAKC,MAAMM,c,GAReH,cCAtBI,G,uLAEjB,OAAO,yBAAKT,UAAU,gB,GAFWK,cCEhBK,G,uLAEjB,OACE,uBACEX,GAAG,cACHY,KAPS,8DAOQV,KAAKC,MAAMU,MAC5BC,OAAO,SACPC,IAAI,uBAEJ,uBAAGd,UAAU,iBAAiBQ,QAASP,KAAKC,MAAMM,e,GATjBH,c,yjBCIzC,IAAMU,EAEJ,8GAEmBC,E,YACnB,WAAYd,GAAQ,IAAD,8BACjB,4CAAMA,KAcRe,YAAc,WAIZC,MAAMH,EAAU,CAAEI,MAAO,aACtBC,MAAK,SAAAC,GAAQ,OAAIA,EAASlB,UAC1BiB,MAAK,SAAAjB,GAAI,OAAImB,KAAKC,MAAMpB,EAAKqB,QAAQ,MAAO,QAC5CJ,MAAK,SAAAK,GAAI,OACR,EAAKC,SAAS,CACZC,MAAO,CACLvB,OAAQqB,EAAKG,aAAe,YAC5BzB,KAAMsB,EAAKI,UACXtB,WAAW,GAEbuB,aAAa,OAGhBC,OAAM,SAAAC,GACL,EAAKN,SAAS,CACZI,aAAa,EACbH,MAAM,EAAD,GAAO,EAAKM,MAAMN,MAAlB,CAAyBpB,WAAW,MAE3C2B,QAAQF,MAAM,+CAAgDA,OArCjD,EAyCnBG,mBAAqB,WACnB,EAAKT,SAAS,CAAEC,MAAM,EAAD,GAAO,EAAKM,MAAMN,MAAlB,CAAyBpB,WAAW,MACzD,EAAKU,eAzCL,EAAKgB,MAAQ,CACXH,aAAa,EACbH,MAAO,CACLvB,OAAQ,GACRD,KAAM,KANO,E,iFAYjBF,KAAKgB,gB,+BAmCL,OACE,yBAAKlB,GAAG,YAAYC,UAAU,aAC3BC,KAAKgC,MAAMH,YACV,kBAAC,EAAD,MAEA,kBAAC,EAAD,CACE1B,OAAQH,KAAKgC,MAAMN,MAAMvB,OACzBD,KAAMF,KAAKgC,MAAMN,MAAMxB,OAG3B,6BACA,yBAAKH,UAAU,qBACb,kBAAC,EAAD,CACEO,UAAWN,KAAKgC,MAAMN,MAAMpB,UAC5BC,QAASP,KAAKkC,qBAEhB,kBAAC,EAAD,CAAYvB,MAAOX,KAAKgC,MAAMN,MAAMxB,a,GAhERE,aCCvB+B,E,iLARX,OACE,0BAAMpC,UAAU,OACd,kBAAC,EAAD,W,GAJUK,aCQEgC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM5B,MAAK,SAAA6B,GACjCA,EAAaC,kB","file":"static/js/main.5cc80489.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./quote.css\";\r\n\r\nexport default class Quote extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <p id=\"text\">\r\n          <i className=\"fas fa-quote-left\" />\r\n          {this.props.text}\r\n        </p>\r\n        <p id=\"author\" className=\"author\">\r\n          {this.props.author ? `-${this.props.author}` : \"\"}\r\n        </p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport \"./refreshQuote.css\";\r\n\r\nexport default class refreshButton extends Component {\r\n  render() {\r\n    return (\r\n      <i\r\n        id=\"new-quote\"\r\n        className={`fas fa-sync${\r\n          this.props.isLoading ? \" fa-sync--is-loading\" : \"\"\r\n        }`}\r\n        onClick={this.props.onClick}\r\n      />\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport \"./spinner.css\";\r\n\r\nexport default class Spinner extends Component {\r\n  render() {\r\n    return <div className=\"spinner\" />;\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport \"./tweetQuote.css\";\r\n\r\nconst tweetUrl = \"https://twitter.com/intent/tweet?hashtags=quote&url=/&text=\";\r\n\r\nexport default class TweetButton extends Component {\r\n  render() {\r\n    return (\r\n      <a\r\n        id=\"tweet-quote\"\r\n        href={tweetUrl + this.props.tweet}\r\n        target=\"_blank\"\r\n        rel=\"noopener noreferrer\"\r\n      >\r\n        <i className=\"fab fa-twitter\" onClick={this.props.onClick} />\r\n      </a>\r\n    );\r\n  }\r\n}\r\n","import \"./quoteBox.css\";\r\n\r\nimport React, { Component } from \"react\";\r\n\r\nimport Quote from \"./quote\";\r\nimport RefreshQuote from \"./refreshQuote\";\r\nimport Spinner from \"./spinner\";\r\nimport TweetQuote from \"./tweetQuote\";\r\n\r\nconst quoteUrl =\r\n  // Forismatic doesn't send the Access-Control-Allow-Origin response header, so make the request through a CORS proxy.\r\n  \"https://cors-anywhere.herokuapp.com/https://api.forismatic.com/api/1.0/?method=getQuote&format=json&lang=en\";\r\n\r\nexport default class QuoteBox extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      initialLoad: true,\r\n      quote: {\r\n        author: \"\",\r\n        text: \"\"\r\n      }\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getNewQuote();\r\n  }\r\n\r\n  getNewQuote = () => {\r\n    // The forismatic API tries to escape single qutoes resulting\r\n    // in invalid JSON. We must handle this to avoid the following error:\r\n    // JSON.parse: bad escaped character\r\n    fetch(quoteUrl, { cache: \"no-store\" })\r\n      .then(response => response.text())\r\n      .then(text => JSON.parse(text.replace(/\\\\/g, \"\")))\r\n      .then(data =>\r\n        this.setState({\r\n          quote: {\r\n            author: data.quoteAuthor || \"anonymous\",\r\n            text: data.quoteText,\r\n            isLoading: false\r\n          },\r\n          initialLoad: false\r\n        })\r\n      )\r\n      .catch(error => {\r\n        this.setState({\r\n          initialLoad: false,\r\n          quote: { ...this.state.quote, isLoading: false }\r\n        });\r\n        console.error(\"There was a problem fetching a new quote: \\n\", error);\r\n      });\r\n  };\r\n\r\n  handleRefreshClick = () => {\r\n    this.setState({ quote: { ...this.state.quote, isLoading: true } });\r\n    this.getNewQuote();\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div id=\"quote-box\" className=\"quote-box\">\r\n        {this.state.initialLoad ? (\r\n          <Spinner />\r\n        ) : (\r\n          <Quote\r\n            author={this.state.quote.author}\r\n            text={this.state.quote.text}\r\n          />\r\n        )}\r\n        <hr />\r\n        <div className=\"quote-box__footer\">\r\n          <RefreshQuote\r\n            isLoading={this.state.quote.isLoading}\r\n            onClick={this.handleRefreshClick}\r\n          />\r\n          <TweetQuote tweet={this.state.quote.text} />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport \"./App.css\";\r\nimport QuoteBox from \"./components/quoteBox.js\";\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <main className=\"App\">\r\n        <QuoteBox />\r\n      </main>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}